// static/js/components/fact-checker.js

class FactChecker {
    constructor() {
        this.data = null;
    }

    render(data) {
        this.data = data;
        
        const container = document.createElement('div');
        container.className = 'fact-checker-container analysis-card';
        
        // Determine what to render based on available data
        if (data.is_pro && data.fact_checks && data.fact_checks.length > 0) {
            container.innerHTML = this.renderProFactCheck();
        } else if (data.key_claims && data.key_claims.length > 0) {
            container.innerHTML = this.renderBasicClaims();
        } else {
            container.innerHTML = this.renderNoClaims();
        }
        
        return container;
    }

    renderProFactCheck() {
        const factChecks = this.data.fact_checks || [];
        const keyClaims = this.data.key_claims || [];
        
        // Merge claims with fact checks
        const mergedClaims = this.mergeClaimsWithFactChecks(keyClaims, factChecks);
        
        // Count verdicts
        const counts = {
            verified: 0,
            false: 0,
            mixed: 0,
            unverified: 0
        };
        
        mergedClaims.forEach(item => {
            const status = this.getClaimStatus(item);
            counts[status]++;
        });
        
        return `
            <div class="analysis-header">
                <span class="analysis-icon">‚úì</span>
                <span>Fact Check Analysis</span>
                <span class="pro-badge">PRO</span>
            </div>
            
            <div class="fact-checker-content">
                ${this.renderFactCheckStats(counts)}
                ${this.renderFactCheckResults(mergedClaims)}
                ${this.renderFactCheckSources()}
                ${this.renderFactCheckSummary()}
            </div>
        `;
    }

    renderBasicClaims() {
        const claims = this.data.key_claims || [];
        
        return `
            <div class="analysis-header">
                <span class="analysis-icon">üìã</span>
                <span>Key Claims Identified</span>
            </div>
            
            <div class="fact-checker-content">
                <div class="fact-check-summary">
                    <p class="fact-check-basic-text">
                        We identified ${claims.length} key claim${claims.length !== 1 ? 's' : ''} in this article.
                        Upgrade to Pro to automatically fact-check these claims using Google's Fact Check API.
                    </p>
                </div>
                
                <div class="claims-list">
                    ${claims.map((claim, index) => this.renderBasicClaim(claim, index)).join('')}
                </div>
                
                <div class="upgrade-prompt">
                    <p>üîç Want automated fact-checking? 
                       <a href="#" onclick="window.pricingDropdown?.show(); return false;">Upgrade to Pro</a>
                    </p>
                </div>
            </div>
        `;
    }

    renderNoClaims() {
        return `
            <div class="analysis-header">
                <span class="analysis-icon">üìã</span>
                <span>Fact Checking</span>
            </div>
            <div class="fact-checker-content">
                <div class="fact-check-summary">
                    <p class="fact-check-basic-text">
                        No specific factual claims were identified in this article for fact-checking.
                    </p>
                </div>
            </div>
        `;
    }

    renderFactCheckStats(counts) {
        const total = Object.values(counts).reduce((a, b) => a + b, 0);
        
        return `
            <div class="fact-check-stats">
                <div class="stat-card verified">
                    <span class="stat-icon">‚úì</span>
                    <div class="stat-number">${counts.verified}</div>
                    <div class="stat-label">Verified</div>
                </div>
                <div class="stat-card false">
                    <span class="stat-icon">‚úó</span>
                    <div class="stat-number">${counts.false}</div>
                    <div class="stat-label">False</div>
                </div>
                <div class="stat-card mixed">
                    <span class="stat-icon">‚âà</span>
                    <div class="stat-number">${counts.mixed}</div>
                    <div class="stat-label">Mixed</div>
                </div>
                <div class="stat-card unverified">
                    <span class="stat-icon">?</span>
                    <div class="stat-number">${counts.unverified}</div>
                    <div class="stat-label">Unverified</div>
                </div>
            </div>
        `;
    }

    renderFactCheckResults(mergedClaims) {
        if (!mergedClaims || mergedClaims.length === 0) return '';
        
        return `
            <div class="fact-check-results">
                <h4>Fact Check Results:</h4>
                <div class="claims-list">
                    ${mergedClaims.map((item, index) => this.renderFactCheckedClaim(item, index)).join('')}
                </div>
            </div>
        `;
    }

    renderFactCheckedClaim(item, index) {
        const status = this.getClaimStatus(item);
        const statusText = this.getStatusText(status);
        const statusIcon = this.getStatusIcon(status);
        const importance = this.getClaimImportance(item, index);
        
        return `
            <div class="claim-item ${status}">
                <div class="claim-header">
                    <div class="claim-status">
                        <span class="status-icon">${statusIcon}</span>
                        <span class="status-text">${statusText}</span>
                    </div>
                    <span class="claim-importance ${importance}">${importance.toUpperCase()}</span>
                </div>
                
                <div class="claim-text">
                    ${this.getClaimText(item)}
                </div>
                
                ${item.factCheck ? this.renderFactCheckDetails(item.factCheck) : ''}
                
                ${item.context ? `
                    <div class="claim-context">
                        <strong>Context:</strong> ${item.context}
                    </div>
                ` : ''}
            </div>
        `;
    }

    renderFactCheckDetails(factCheck) {
        return `
            <div class="fact-check-details">
                <div class="check-source">
                    <span class="source-label">Source:</span>
                    <span class="source-name">${factCheck.publisher || factCheck.source || 'Fact Check Database'}</span>
                </div>
                ${factCheck.url ? `
                    <a href="${factCheck.url}" target="_blank" class="check-link">
                        View fact check ‚Üí
                    </a>
                ` : ''}
            </div>
            ${factCheck.explanation ? `
                <div class="check-review">
                    ${factCheck.explanation}
                </div>
            ` : ''}
        `;
    }

    renderBasicClaim(claim, index) {
        const importance = this.getClaimImportance(claim, index);
        
        return `
            <div class="claim-item">
                <div class="claim-header">
                    <div class="claim-status">
                        <span class="status-icon">üìå</span>
                        <span class="status-text">Claim ${index + 1}</span>
                    </div>
                    <span class="claim-importance ${importance}">${importance.toUpperCase()}</span>
                </div>
                
                <div class="claim-text">
                    ${this.getClaimText(claim)}
                </div>
                
                <div class="unverified-message">
                    Fact check not available in Basic plan
                </div>
            </div>
        `;
    }

    renderFactCheckSources() {
        return `
            <div class="fact-check-sources">
                <h4>Fact Check Sources:</h4>
                <div class="sources-list">
                    <div class="source-chip">
                        <span class="source-icon">üîç</span>
                        <span>Google Fact Check API</span>
                    </div>
                    <div class="source-chip">
                        <span class="source-icon">üìä</span>
                        <span>Pattern Analysis</span>
                    </div>
                </div>
                <p class="sources-note">
                    Claims are verified using Google's Fact Check Tools API and advanced pattern analysis.
                </p>
            </div>
        `;
    }

    renderFactCheckSummary() {
        const summary = this.data.fact_check_summary || this.generateSummary();
        
        if (!summary) return '';
        
        return `
            <div class="fact-check-summary-section">
                <h4>Summary:</h4>
                <p>${summary}</p>
            </div>
        `;
    }

    // Helper methods
    mergeClaimsWithFactChecks(keyClaims, factChecks) {
        const merged = [];
        
        // Process key claims
        keyClaims.forEach((claim, index) => {
            const claimText = this.getClaimText(claim);
            
            // Find matching fact check
            const factCheck = factChecks.find(fc => {
                const fcClaimText = (fc.claim || '').toLowerCase();
                return fcClaimText.includes(claimText.toLowerCase().substring(0, 50));
            });
            
            merged.push({
                claim: claim,
                factCheck: factCheck,
                text: claimText,
                importance: claim.importance || (index === 0 ? 'high' : 'medium'),
                context: claim.context || null
            });
        });
        
        // Add any fact checks that didn't match claims
        factChecks.forEach(fc => {
            const exists = merged.some(m => m.factCheck === fc);
            if (!exists) {
                merged.push({
                    claim: { text: fc.claim },
                    factCheck: fc,
                    text: fc.claim,
                    importance: 'medium',
                    context: null
                });
            }
        });
        
        return merged;
    }

    getClaimText(claim) {
        if (typeof claim === 'string') {
            return claim;
        } else if (claim && typeof claim === 'object') {
            return claim.text || claim.claim || 'Claim text unavailable';
        }
        return 'Claim text unavailable';
    }

    getClaimStatus(item) {
        if (!item.factCheck) return 'unverified';
        
        const verdict = (item.factCheck.verdict || '').toLowerCase();
        
        if (verdict.includes('true') && !verdict.includes('false')) {
            return 'verified';
        } else if (verdict.includes('false')) {
            return 'false';
        } else if (verdict.includes('partial') || verdict.includes('mixed')) {
            return 'mixed';
        }
        
        return 'unverified';
    }

    getStatusText(status) {
        const statusMap = {
            'verified': 'Verified True',
            'false': 'False',
            'mixed': 'Partially True',
            'unverified': 'Unverified'
        };
        
        return statusMap[status] || 'Unverified';
    }

    getStatusIcon(status) {
        const iconMap = {
            'verified': '‚úì',
            'false': '‚úó',
            'mixed': '‚âà',
            'unverified': '?'
        };
        
        return iconMap[status] || '?';
    }

    getClaimImportance(claim, index) {
        if (typeof claim === 'object' && claim.importance) {
            return claim.importance;
        }
        return index === 0 ? 'high' : 'medium';
    }

    generateSummary() {
        const factChecks = this.data.fact_checks || [];
        if (factChecks.length === 0) return null;
        
        const counts = {
            verified: 0,
            false: 0,
            mixed: 0,
            unverified: 0
        };
        
        factChecks.forEach(fc => {
            const verdict = (fc.verdict || '').toLowerCase();
            if (verdict.includes('true') && !verdict.includes('false')) {
                counts.verified++;
            } else if (verdict.includes('false')) {
                counts.false++;
            } else if (verdict.includes('partial') || verdict.includes('mixed')) {
                counts.mixed++;
            } else {
                counts.unverified++;
            }
        });
        
        const parts = [`Checked ${factChecks.length} claims`];
        
        if (counts.verified > 0) parts.push(`${counts.verified} verified as true`);
        if (counts.false > 0) parts.push(`${counts.false} found false`);
        if (counts.mixed > 0) parts.push(`${counts.mixed} partially true`);
        if (counts.unverified > 0) parts.push(`${counts.unverified} unverified`);
        
        return parts.join(', ') + '.';
    }
}

// Create global instance
window.FactChecker = FactChecker;

// Auto-register with UI controller
document.addEventListener('DOMContentLoaded', () => {
    if (window.UI) {
        window.UI.registerComponent('factChecker', new FactChecker());
    }
});
